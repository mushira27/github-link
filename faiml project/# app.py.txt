
 # C:\Users\G Mushira Begam\OneDrive\Desktop\faiml project\Curriculum gap Identification.csv

# app.py

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.ensemble import RandomForestClassifier

# =========================
# LOAD DATA
# =========================
st.title("üìä Curriculum Gap Identification Dashboard")

uploaded_file = st.file_uploader("üìÇ Upload your CSV file", type=["csv"])
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.write("‚úÖ Data Preview", df.head())
    st.write(f"üìè Dataset Shape: {df.shape[0]} rows √ó {df.shape[1]} columns")

    # =========================
    # SELECT TARGET & FEATURES
    # =========================
    target = st.selectbox("üéØ Select Target Column", df.columns)
    features = st.multiselect("üß© Select Feature Columns", [col for col in df.columns if col != target])

    if target and features:
        X = df[features]
        y = df[target]

        # Encode categorical variables
        X_encoded = pd.get_dummies(X, drop_first=True)

        # Scale features
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X_encoded)

        # Train-test split
        try:
            X_train, X_test, y_train, y_test = train_test_split(
                X_scaled, y, test_size=0.3, random_state=42, stratify=y
            )

            # =========================
            # MODEL SELECTION
            # =========================
            model_choice = st.selectbox("ü§ñ Choose Model", ["Logistic Regression", "Random Forest"])
            if model_choice == "Logistic Regression":
                model = LogisticRegression(max_iter=200)
            else:
                model = RandomForestClassifier()

            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

            # =========================
            # EVALUATION
            # =========================
            st.subheader("üìã Classification Report")
            st.text(classification_report(y_test, y_pred))

            # Confusion Matrix
            st.subheader("üìä Confusion Matrix")
            cm = confusion_matrix(y_test, y_pred)
            fig, ax = plt.subplots()
            sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
                        xticklabels=model.classes_, yticklabels=model.classes_, ax=ax)
            plt.xlabel("Predicted")
            plt.ylabel("Actual")
            st.pyplot(fig)

            # =========================
            # PREDICTION INPUT (FIXED)
            # =========================
            st.subheader("üîÆ Make a Prediction")

            input_data = {}
            for col in features:
                if df[col].dtype in ["int64", "float64"]:  # Numeric
                    val = st.number_input(f"Enter {col}", value=float(df[col].mean()))
                    input_data[col] = val
                else:  # Categorical
                    options = df[col].unique().tolist()
                    val = st.selectbox(f"Select {col}", options)
                    input_data[col] = val

            if st.button("Predict"):
                input_df = pd.DataFrame([input_data])
                input_encoded = pd.get_dummies(input_df, drop_first=True)
                input_encoded = input_encoded.reindex(columns=X_encoded.columns, fill_value=0)

                prediction = model.predict(input_encoded)[0]
                st.success(f"üéØ Predicted Class: {prediction}")

        except ValueError as e:
            st.error(f"‚ö†Ô∏è Error: {e}")